import fs from "fs/promises";
import path from "path";

import { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Card from "../lib/Card";

export default function Home({ myProp, cwd, time }) {
  const [timeString, setTimeString] = useState("at ?");

  useEffect(() => {
    const date = new Date(time);
    setTimeString("at " + date.toLocaleString());
  }, [time]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Playground</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Directory listing</h1>

        <p className={styles.description}>
          <code>{cwd}</code> {timeString}
        </p>

        <div className={styles.grid}>
          {myProp.map(([thing, isDir], i) => (
            <Card className={styles.card} thing={thing} isDir={isDir} key={i} />
          ))}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer">
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

function resolvePath(relPath) {
  if (path.isAbsolute(relPath)) return relPath;
  return path.join(process.cwd(), relPath);
}

async function getStat(filePath) {
  try {
    return await fs.stat(resolvePath(filePath));
  } catch {
    return false;
  }
}

export async function getStaticProps() {
  const things = await fs.readdir(process.cwd());
  let files = new Array();

  for (const thing of things) {
    if (thing === "node_modules") continue;
    if (thing === ".git") continue;

    const stat = await getStat(thing);
    if (!stat) {
      continue;
    }

    if (stat.isFile()) files.push([thing, false]);
    if (stat.isDirectory()) {
      const temp = new Object();
      temp.name = thing;

      const children = await fs.readdir(resolvePath(thing));
      temp.children = await Promise.all(
        children.map(async child => {
          const childStat = await getStat(resolvePath(path.join(thing, child)));
          const isDir = childStat.isDirectory();
          return [child, isDir];
        })
      );

      files.push([temp, true]);
    }
  }

  return {
    props: {
      myProp: files,
      cwd: process.cwd(),
      time: Date.now()
    },
    revalidate: 300
  };
}
